services:
  database:
    image: postgres:latest
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: home-maestro
    ports:
      - "5432:5432"
    volumes:
      - db_file:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d home-maestro"]
      interval: 1s
      timeout: 5s
      retries: 20
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 10s
      retries: 20
    depends_on:
      database : 
        condition: service_healthy	
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
        - 5672:5672
        - 15672:15672
    networks:
      - backend

  backend:
    build: ./hm-backend/homemaestro
    restart: on-failure
    volumes:
      - ./hm-backend/homemaestro:/app
      - backend_data:/app/data
    depends_on:
      database:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.datasource.url" : "jdbc:postgresql://database:5432/home-maestro",
          "spring.datasource.username" : "root",
          "spring.datasource.password" : "root",
          "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
          "spring.jpa.hibernate.ddl-auto" : "update",
          "springdoc.api-docs.path" : "/api/docs",
          "springdoc.swagger-ui.path" : "/api/docs",
          "spring.rabbitmq.host" : "rabbitmq",
          "spring.rabbitmq.port" : "5672",
          "spring.rabbitmq.username" : "guest",
          "spring.rabbitmq.password" : "guest"
        }'
    healthcheck:
      test: curl --fail --silent localhost:8080/actuator/health || exit 1
      interval: 2s
      timeout: 30s
      retries: 200
      start_period: 10s
    networks:
      - backend
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=PathPrefix(`/api`)
      - traefik.http.services.backend.loadbalancer.server.port=8080
      - traefik.http.routers.backend.entrypoints=web

  simulation:
    build: ./hm-simulation
    restart: on-failure
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --silent http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.simulation.rule=PathPrefix(`/simulation`)
      - traefik.http.services.simulation.loadbalancer.server.port=5000
      - traefik.http.routers.simulation.entrypoints=web

  frontend:
    build: ./hm-frontend
    restart: on-failure
    volumes:
      - ./hm-frontend:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
      simulation:
        condition: service_healthy
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=PathPrefix(`/`)
      - traefik.http.services.frontend.loadbalancer.server.port=3000
      - traefik.http.routers.frontend.entrypoints=web

  traefik:
    image: traefik:v2.11
    ports:
      - "80:80"
      - "8080:8080"
    depends_on:
      frontend:
        condition: service_started
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./proxy/traefik.yml:/etc/traefik/traefik.yml"
    restart: unless-stopped
    networks:
      - backend
      - frontend

volumes:
  db_file:
  backend_data:

networks:
  backend:
  frontend: